# Copyright 2014-2015 Project Vogue. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//elang/build/elang_target_arch.gni")

component("lir") {
  output_name = "elang_lir"
  sources = [
    "analysis/liveness_analyzer.cc",
    "analysis/liveness_analyzer.h",
    "analysis/use_def_list.cc",
    "analysis/use_def_list.h",
    "analysis/use_def_list_builder.cc",
    "analysis/use_def_list_builder.h",
    "code_emitter.cc",
    "code_emitter.h",
    "editor.cc",
    "editor.h",
    "editor_owner.cc",
    "editor_owner.h",
    "editor_user.cc",
    "editor_user.h",
    "error_code.h",
    "error_data.cc",
    "error_data.h",
    "factory.cc",
    "factory.h",
    "factory_user.cc",
    "factory_user.h",
    "formatters/text_formatter.cc",
    "formatters/text_formatter.h",
    "instructions.cc",
    "instructions.h",
    "instruction_visitor.cc",
    "instruction_visitor.h",
    "literals.cc",
    "literals.h",
    "literals_forward.h",
    "literal_map.cc",
    "literal_map.h",
    "literal_visitor.cc",
    "literal_visitor.h",
    "pass.h",
    "pass.cc",
    "printable.h",
    "printer_generic.h",
    "printer_generic.cc",
    "target.h",
    "transforms/prepare_phi_inversion.cc",
    "transforms/prepare_phi_inversion.h",
    "transforms/register_allocation.cc",
    "transforms/register_allocation.h",
    "transforms/register_allocation_tracker.cc",
    "transforms/register_allocation_tracker.h",
    "transforms/register_allocator.cc",
    "transforms/register_allocator.h",
    "transforms/register_usage_tracker.cc",
    "transforms/register_usage_tracker.h",
    "transforms/stack_allocator.cc",
    "transforms/stack_allocator.h",
    "value.h",
    "value.cc",
    "validator.h",
    "validator.cc",
  ]

  defines = [ "LIR_IMPLEMENTATION" ]

  public_deps = [
    "//base",
    "//elang/api",
    "//elang/base",
    "//elang:elang_target_arch",
  ]

  if (elang_target_arch == "x64") {
    sources += [
      "code_emitter_x64.cc",
      "instructions_x64.cc",
      "instructions_x64.h",
      "instructions_x64_forward.h",
      "opcodes_x64.h",
      "target_x64.h",
      "target_x64.cc",
      "transforms/lowering_x64.cc",
      "transforms/lowering_x64.h",
    ]
  }
}

source_set("test_support") {
  testonly = true
  sources = [
    "testing/lir_test.cc",
    "testing/lir_test.h",
    "testing/test_machine_code_builder.cc",
  ]
  public_deps = [
    "//testing/gtest",
    "//elang/api",
    ":lir",
  ]
  if (elang_target_arch == "x64") {
    sources += [
      "testing/lir_test_x64.cc",
      "testing/lir_test_x64.h",
    ]
  }
}

source_set("lir_unittests") {
  testonly = true
  sources = [
    "analysis/use_def_list_unittest.cc",
    "editor_unittest.cc",
    "instructions_unittest.cc",
    "literals_unittest.cc",
    "transforms/prepare_phi_inversion_unittest.cc",
    "transforms/stack_allocator_unittest.cc",
    "value_unittest.cc",
  ]
  public_deps = [
    ":test_support",
  ]
  if (elang_target_arch == "x64") {
    sources += [
      "code_emitter_x64_unittest.cc",
      "instructions_x64_unittest.cc",
      "target_x64_unittest.cc",
      "transforms/lowering_x64_unittest.cc",
    ]
  }
}

test("elang_lir_unittests") {
  deps = [
    "//base/test:run_all_unittests",
    ":lir_unittests",
  ]
}
