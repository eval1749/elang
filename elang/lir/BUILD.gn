# Copyright 2014-2015 Project Vogue. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//elang/build/elang_target_arch.gni")
import("//testing/test.gni")

component("lir") {
  output_name = "elang_lir"
  defines = [ "LIR_IMPLEMENTATION" ]

  public_deps = [
    ":core",
    "analysis:analysis",
    "emitters:emitters",
    "transforms:transforms",
  ]
}

source_set("core") {
  sources = [
    "editor.cc",
    "editor.h",
    "editor_owner.cc",
    "editor_owner.h",
    "editor_user.cc",
    "editor_user.h",
    "error_code.h",
    "error_data.cc",
    "error_data.h",
    "error_reporter.cc",
    "error_reporter.h",
    "error_sink.cc",
    "error_sink.h",
    "factory.cc",
    "factory.h",
    "factory_user.cc",
    "factory_user.h",
    "formatters/text_formatter.cc",
    "formatters/text_formatter.h",
    "instruction_visitor.cc",
    "instruction_visitor.h",
    "instructions.cc",
    "instructions.h",
    "literal_map.cc",
    "literal_map.h",
    "literal_visitor.cc",
    "literal_visitor.h",
    "literals.cc",
    "literals.h",
    "literals_forward.h",
    "pass.cc",
    "pass.h",
    "pipeline.cc",
    "pipeline.h",
    "printable.h",
    "printer_generic.cc",
    "printer_generic.h",
    "target.h",
    "validator.cc",
    "validator.h",
    "value.cc",
    "value.h",
  ]

  defines = [ "LIR_IMPLEMENTATION" ]

  public_deps = [
    "//base",
    "//elang:elang_target_arch",
    "//elang/api",
    "//elang/base",
  ]

  if (elang_target_arch == "x64") {
    sources += [
      "instructions_x64.cc",
      "instructions_x64.h",
      "instructions_x64_forward.h",
      "isa_x64.h",
      "opcodes_x64.h",
      "target_x64.cc",
      "target_x64.h",
      "validator_x64.cc",
    ]
  }
}

source_set("core_tests") {
  visibility = [ ":*" ]
  testonly = true
  sources = [
    "editor_test.cc",
    "instructions_test.cc",
    "literals_test.cc",
    "value_test.cc",
  ]
  public_deps = [
    ":test_support",
  ]
  if (elang_target_arch == "x64") {
    sources += [
      "instructions_x64_test.cc",
      "target_x64_test.cc",
    ]
  }
}

source_set("test_support") {
  visibility = [
    ":*",
    "./*",
  ]
  testonly = true
  sources = [
    "testing/lir_test.cc",
    "testing/lir_test.h",
    "testing/test_machine_code_builder.cc",
  ]
  public_deps = [
    "//testing/gtest",
    "//elang/api",
    ":lir",
  ]
  if (elang_target_arch == "x64") {
    sources += [
      "testing/lir_test_x64.cc",
      "testing/lir_test_x64.h",
    ]
  }
}

source_set("test_files") {
  visibility = [ ":*" ]
  testonly = true
  deps = [
    ":core_tests",
    "analysis:tests",
    "emitters:tests",
    "transforms:tests",
  ]
}

test("tests") {
  output_name = "elang_lir_tests"
  deps = [
    "//base/test:run_all_unittests",
    ":test_files",
  ]
}
