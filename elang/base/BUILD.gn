# Copyright 2014-2015 Project Vogue. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/test.gni")

component("base") {
  output_name = "elang_base"
  sources = [
    "analysis/data_flow_solver.h",
    "analysis/liveness.cc",
    "analysis/liveness.h",
    "analysis/liveness_builder.h",
    "analysis/liveness_collection.h",
    "analysis/liveness_editor.cc",
    "analysis/liveness_editor.h",
    "as_printable.cc",
    "as_printable.h",
    "atomic_string.cc",
    "atomic_string.h",
    "atomic_string_factory.cc",
    "atomic_string_factory.h",
    "bit_set.cc",
    "bit_set.h",
    "bits.h",
    "castable.h",
    "disjoint_sets.h",
    "double_linked.h",
    "float_types.h",
    "graphs/flow_graph.h",
    "graphs/graph.h",
    "graphs/graph_editor.h",
    "graphs/graph_sorter.h",
    "index_sequence.h",
    "iterator_on_iterator.h",
    "maybe.h",
    "ordered_list.h",
    "simple_directed_graph.h",
    "tree_algorithm.h",
    "visitable.h",
    "work_list.h",
    "zone.cc",
    "zone.h",
    "zone_allocated.cc",
    "zone_allocated.h",
    "zone_allocator.h",
    "zone_deque.h",
    "zone_owner.cc",
    "zone_owner.h",
    "zone_unordered_map.h",
    "zone_unordered_set.h",
    "zone_user.cc",
    "zone_user.h",
    "zone_vector.h",
  ]

  defines = [ "ELANG_BASE_IMPLEMENTATION" ]

  public_deps = [
    "//base",
  ]

  if (is_win) {
    sources += [ "logging_win.h" ]
  }
}

source_set("test_support") {
  visibility = [ ":*" ]
  testonly = true
  sources = [
    "graphs/graph_test_support.cc",
    "graphs/graph_test_support.h",
  ]
  public_deps = [
    "//testing/gtest",
    ":base",
  ]
}

source_set("test_files") {
  visibility = [ ":*" ]
  testonly = true
  sources = [
    "analysis/data_flow_solver_test.cc",
    "analysis/dominator_tree_test.cc",
    "analysis/liveness_builder_test.cc",
    "analysis/loop_tree_test.cc",
    "as_printable_test.cc",
    "atomic_string_test.cc",
    "bit_set_test.cc",
    "bits_test.cc",
    "castable_test.cc",
    "disjoint_sets_test.cc",
    "double_linked_test.cc",
    "graphs/graph_test.cc",
    "iterator_on_iterator_test.cc",
    "ordered_list_test.cc",
    "simple_directed_graph_test.cc",
    "tree_algorithm_test.cc",
    "work_list_test.cc",
  ]

  public_deps = [
    ":test_support",
  ]
}

test("tests") {
  output_name = "elang_base_tests"
  deps = [
    "//base/test:run_all_unittests",
    ":test_files",
  ]
}
